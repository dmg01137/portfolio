<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.dao.detection.PatternDetectionDAO">

    <!-- 모든 패턴 탐지 조회 -->
    <select id="getAllPatternDetections" resultType="com.example.demo.dto.detection.PatternDetection">
        SELECT detection_number, CONCAT(s_ip, ' to ', d_ip) AS s_to_ip, s_ip, d_ip, s_port, d_port, create_dt, modify_dt, action_type, policy_name, policy_info, pattern_1, pattern_2, pattern_3, dangerous
        FROM detection_db.pattern_detection
    </select>

    <!-- 이름으로 패턴 탐지 조회 -->
    <select id="getPatternDetectionByName" resultType="com.example.demo.dto.detection.PatternDetection" parameterType="java.lang.String">
        SELECT detection_number, CONCAT(s_ip, ' to ', d_ip) AS s_to_ip, s_ip, d_ip, s_port, d_port, create_dt, modify_dt, action_type, policy_name, policy_info, pattern_1, pattern_2, pattern_3, dangerous
        FROM detection_db.pattern_detection WHERE policy_name = #{policy_name}
    </select>

    <!-- 패턴 탐지 추가 -->
    <insert id="addPatternDetection" parameterType="com.example.demo.dto.detection.PatternDetection">
        INSERT INTO detection_db.pattern_detection (detection_number, s_to_ip,s_ip, d_ip, s_port, d_port, create_dt, modify_dt, action_type, policy_name, policy_info, pattern_1, pattern_2, pattern_3, dangerous)
        VALUES (#{detection_number},#{s_to_ip}, #{s_ip}, #{d_ip}, #{s_port}, #{d_port}, #{create_dt}, #{modify_dt}, #{action_type}, #{policy_name}, #{policy_info}, #{pattern_1}, #{pattern_2}, #{pattern_3}, #{dangerous})
    </insert>

    <!-- 패턴 탐지 수정 -->
    <update id="updatePatternDetection" parameterType="com.example.demo.dto.detection.PatternDetection">
        UPDATE detection_db.pattern_detection
        SET s_ip = #{s_ip}, d_ip = #{d_ip}, s_port = #{s_port}, d_port = #{d_port}, create_dt = #{create_dt}, modify_dt = #{modify_dt}, action_type = #{action_type},
            policy_name = #{policy_name}, policy_info = #{policy_info}, pattern_1 = #{pattern_1}, pattern_2 = #{pattern_2}, pattern_3 = #{pattern_3}, dangerous = #{dangerous}
        WHERE detection_number = #{detection_number}
    </update>

    <!-- 패턴 탐지 삭제 -->
    <delete id="deletePatternDetection" parameterType="java.lang.Long">
        DELETE FROM detection_db.pattern_detection WHERE detection_number = #{detection_number}
    </delete>

    <!-- 검색 조건으로 패턴 탐지 조회 -->
    <select id="searchPatternDetections" resultType="com.example.demo.dto.detection.PatternDetection" parameterType="java.lang.String">
        SELECT detection_number, CONCAT(s_ip, ' to ', d_ip) AS s_to_ip, s_ip, d_ip, s_port, d_port, create_dt, modify_dt, action_type, policy_name, policy_info, pattern_1, pattern_2, pattern_3, dangerous
        FROM detection_db.pattern_detection WHERE pattern_1 LIKE '%' || #{searchInputName} || '%'
                                              OR pattern_2 LIKE '%' || #{searchInputName} || '%'
                                              OR pattern_3 LIKE '%' || #{searchInputName} || '%'
    </select>

    <!-- 페이징된 모든 패턴 탐지 조회 -->
    <select id="getAllPatternDetectionsPaged" resultType="com.example.demo.dto.detection.PatternDetection" parameterType="java.util.Map">
        SELECT * FROM (
            SELECT ROW_NUMBER() OVER (ORDER BY detection_number) AS ROWNUM, detection_number, CONCAT(s_ip, ' to ', d_ip) AS s_to_ip, s_ip, d_ip, s_port, d_port, create_dt, modify_dt, action_type, policy_name, policy_info, pattern_1, pattern_2, pattern_3, dangerous
            FROM detection_db.pattern_detection
        ) WHERE ROWNUM BETWEEN #{startRow} AND #{endRow}
    </select>

    <!-- 시간 범위로 패턴 탐지 조회 -->
    <select id="getPatternDetectionsByTimeRange" resultType="com.example.demo.dto.detection.PatternDetection" parameterType="java.util.Map">
        SELECT detection_number, CONCAT(s_ip, ' to ', d_ip) AS s_to_ip, s_ip, d_ip, s_port, d_port, create_dt, modify_dt, action_type, policy_name, policy_info, pattern_1, pattern_2, pattern_3, dangerous
        FROM detection_db.pattern_detection
        WHERE create_dt BETWEEN #{start} AND #{end}
    </select>

</mapper>
