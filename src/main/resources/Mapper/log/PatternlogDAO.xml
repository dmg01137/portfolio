<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.dao.log.PatternLogDAO">

    <resultMap id="patternLogResultMap" type="com.example.demo.dto.log.PatternLog">
        <id property="detectionNumber" column="detection_number"/>
        <result property="time" column="time"/>
        <result property="sIp" column="s_ip"/>
        <result property="dIp" column="d_ip"/>
        <result property="sPort" column="s_port"/>
        <result property="dPort" column="d_port"/>
        <result property="len" column="len"/>
        <result property="pattern1" column="pattern1"/>
        <result property="pattern2" column="pattern2"/>
        <result property="pattern3" column="pattern3"/>
        <result property="packet" column="packet"/>
        <result property="policyName" column="policy_name"/>
    </resultMap>

    <!-- ID를 기반으로 패턴 로그를 조회합니다 -->
    <select id="findById" resultMap="patternLogResultMap" parameterType="map">
        SELECT *
        FROM log_db.pattern_log_${tableName}
        WHERE detection_number = #{detection_number}
    </select>

    <!-- 모든 패턴 로그를 조회합니다 -->
    <select id="findAll" resultMap="patternLogResultMap" parameterType="map">
        SELECT *
        FROM log_db.pattern_log_20240716
    </select>

    <!-- 새로운 패턴 로그를 저장합니다 -->
    <insert id="save" parameterType="com.example.demo.dto.log.PatternLog">
        INSERT INTO log_db.pattern_log_${tableName} (time, s_ip, d_ip, s_port, d_port, len, pattern1, pattern2, pattern3, packet, policy_name)
        VALUES (#{time}, #{sIp}, #{dIp}, #{sPort}, #{dPort}, #{len}, #{pattern1}, #{pattern2}, #{pattern3}, #{packet}, #{policyName})
    </insert>

    <!-- 기존 패턴 로그를 업데이트합니다 -->
    <update id="update" parameterType="com.example.demo.dto.log.PatternLog">
        UPDATE log_db.pattern_log_${tableName}
        SET time = #{time}, s_ip = #{sIp}, d_ip = #{dIp}, s_port = #{sPort}, d_port = #{dPort}, len = #{len}, pattern1 = #{pattern1}, pattern2 = #{pattern2}, pattern3 = #{pattern3}, packet = #{packet}, policy_name = #{policyName}
        WHERE detection_number = #{detectionNumber}
    </update>

    <!-- ID를 기반으로 특정 패턴 로그를 삭제합니다 -->
    <delete id="delete" parameterType="map">
        DELETE FROM log_db.pattern_log_${tableName} WHERE detection_number = #{detection_number}
    </delete>

</mapper>
